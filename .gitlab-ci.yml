image: "gableroux/unity3d:2018.3.2f1"

stages:
- build-dependencies
- test-main
- build-main
- post-build
- documentation
- deploy

cache:
  key: "$CI_PIPELINE_ID"
  untracked: true

variables:
  BUILD_NAME: What_The_Hack
  GIT_SUBMODULE_STRATEGY: recursive

.android_before_script: &android_before_script
  before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export ANDROID_SDK_HOME=$CI_PROJECT_DIR
  - chmod +x ./${PROJECT_DIR}/gradlew

.unity_before_script: &unity_before_script
  before_script:
  - mkdir -p /root/.cache/unity3d
  - mkdir -p /root/.local/share/unity3d/Unity/
  - echo "$UNITY_LICENSE_CONTENT" | tr -d '\r' > /root/.local/share/unity3d/Unity/Unity_lic.ulf
  - cp -rf ./AndroidPlugin/androidunitybridge/build/outputs/aar/* ./Assets/Plugins/Android/
  - apt-get update
  - apt-get -y install git
  - git submodule sync --recursive
  - git submodule update  --remote --recursive

.unity_android_before_script: &unity_android_before_script
  before_script:
  - mkdir -p /root/.cache/unity3d
  - mkdir -p /root/.local/share/unity3d/Unity/
  - echo "$UNITY_LICENSE_CONTENT_ANDROID" | tr -d '\r' > /root/.local/share/unity3d/Unity/Unity_lic.ulf
  - cp -rf ./AndroidPlugin/androidunitybridge/build/outputs/aar/* ./Assets/Plugins/Android/
  - apt-get update
  - apt-get -y install git
  - git submodule sync --recursive
  - git submodule update  --remote --recursive


#test-android:
#  image: openjdk:8-jdk
#  stage: test
#  <<: *android_before_script
#  script:
#    - ./AndroidPlugin/gradlew test
#  variables:
#    PROJECT_DIR: AndroidPlugin

.test: &test
  stage: test-main
  <<: *unity_before_script
  script: |
    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
      /opt/Unity/Editor/Unity \
        -projectPath $(pwd) \
        -runTests \
        -testPlatform $TEST_PLATFORM \
        -testResults $(pwd)/$TEST_PLATFORM-results.xml \
        -logFile \
        -batchmode || true
    UNITY_EXIT_CODE=$(sed -n 's/.*failed="\([^"]*\).*/\1/p' $(pwd)/$TEST_PLATFORM-results.xml | grep -m1 "")
    cat $(pwd)/$TEST_PLATFORM-results.xml
    if [ $UNITY_EXIT_CODE == "0" ]; then
      echo "Run succeeded, no failures occurred";
      exit 0
    else
      echo "$UNITY_EXIT_CODE tests failed.";
      exit 1
    fi
  artifacts:
    paths:
    - $(pwd)/$TEST_PLATFORM-results.xml
    expire_in: 2 weeks

test-unity-editmode:
  <<: *test
  retry: 2
  variables:
    TEST_PLATFORM: editmode

test-unity-playmode:
  <<: *test
  retry: 2
  variables:
    TEST_PLATFORM: playmode

build-AndroidPlugin:
  image: jangrewe/gitlab-ci-android
  stage: build-dependencies
  <<: *android_before_script
  retry: 2
  script:
    - ./AndroidPlugin/gradlew assembleDebug -p ./AndroidPlugin
  artifacts:
    paths:
    - AndroidPlugin/androidunitybridge/build/outputs/
    expire_in: 2 weeks
  variables:
    PROJECT_DIR: AndroidPlugin

.build-unity: &build-unity
  stage: build-main
  #tip: you can reuse same stage to do everything in parallel and reduce overall time
  # stage: test
  <<: *unity_before_script
  script: |
    echo "Building for $BUILD_TARGET"
    export BUILD_PATH=./Builds/$BUILD_TARGET/
    mkdir -p $BUILD_PATH
    if [ -z "$CI_COMMIT_TAG" ];
    then
      export BUILD_VERSION=$CI_COMMIT_REF_NAME-$CI_JOB_ID-$CI_COMMIT_SHORT_SHA
    else
      export BUILD_VERSION=$CI_COMMIT_TAG
    fi
    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
      /opt/Unity/Editor/Unity \
        -projectPath $(pwd) \
        -quit \
        -batchmode \
        -buildTarget $BUILD_TARGET \
        -customBuildTarget $BUILD_TARGET \
        -customBuildName $BUILD_NAME \
        -customBuildPath $BUILD_PATH \
        -customBuildOptions AcceptExternalModificationsToPlayer \
        -customVersionNumber $BUILD_VERSION \
        -executeMethod BuildCommand.PerformBuild \
        -logFile
    ls -la $BUILD_PATH
    cp -r $BUILD_PATH ./What_the_Hack_$BUILD_TARGET
    [ -n "$(ls -A $BUILD_PATH)" ] # fail job if build folder is empty
  
  artifacts:
    paths:
    - ./What_the_Hack_$BUILD_TARGET
    expire_in: 2 weeks

.build-unity-android: &build-unity-android
  stage: build-main
  #tip: you can reuse same stage to do everything in parallel and reduce overall time
  # stage: test
  <<: *unity_android_before_script
  image: unity-android:latest
  script: |
    echo "Building for $BUILD_TARGET"
    export BUILD_PATH=./Builds/$BUILD_TARGET/
    mkdir -p $BUILD_PATH
    if [ -z "$CI_COMMIT_TAG" ];
    then
      export BUILD_VERSION=$CI_COMMIT_REF_NAME-$CI_JOB_ID-$CI_COMMIT_SHORT_SHA
    else
      export BUILD_VERSION=$CI_COMMIT_TAG
    fi
    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
      /opt/Unity/Editor/Unity \
        -projectPath $(pwd) \
        -quit \
        -batchmode \
        -buildTarget $BUILD_TARGET \
        -customBuildTarget $BUILD_TARGET \
        -customBuildName $BUILD_NAME \
        -customBuildPath $BUILD_PATH \
        -customBuildOptions AcceptExternalModificationsToPlayer \
        -customVersionNumber $BUILD_VERSION \
        -executeMethod BuildCommand.PerformBuildAndroid \
        -logFile
    ls -la $BUILD_PATH
    [ -n "$(ls -A $BUILD_PATH)" ] # fail job if build folder is empty
  
  artifacts:
    paths:
    - ./Builds/
    expire_in: 2 weeks

build-unity-Linux-x86_64:
  <<: *build-unity
  retry: 2
  variables:
    BUILD_TARGET: StandaloneLinux64

build-unity-macOS:
  <<: *build-unity
  retry: 2
  variables:
    BUILD_TARGET: StandaloneOSX

#Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-StandaloneOSXUniversal:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneOSXUniversal

build-unity-Windows-x86_64:
  <<: *build-unity
  retry: 2
  variables:
    BUILD_TARGET: StandaloneWindows64

build-android:
  <<: *build-unity-android
  retry: 2
  variables:
    BUILD_TARGET: Android

generate-android-apk:
  image: unity-android:latest
  stage: post-build
  script: |
    if [ -z "$CI_COMMIT_TAG" ];
    then
      export BUILD_VERSION=$CI_COMMIT_REF_NAME-$CI_JOB_ID-$CI_COMMIT_SHORT_SHA
    else
      export BUILD_VERSION=$CI_COMMIT_TAG
    fi
    cd ./Builds
    cd ./$BUILD_TARGET
    cd ./$BUILD_NAME
    cd ./$BUILD_NAME2
    ls -ahl
    echo "${ANDROID_STOREFILE}" | base64 --decode > $CI_PROJECT_DIR/storefile
    gradle assembleRelease -Pandroid.injected.signing.store.file=$CI_PROJECT_DIR/storefile -Pandroid.injected.signing.store.password=$ANDROID_STOREPW -Pandroid.injected.signing.key.alias=$ANDROID_KALIAS -Pandroid.injected.signing.key.password=$ANDROID_KPW  --stacktrace --info
    rm $CI_PROJECT_DIR/storefile
    ls -ahl
    find . -name '*.apk'
    ls -ahl build/outputs/apk/
    cp ./build/outputs/apk/release/What_the_Hack-armeabi-v7a-release.apk $CI_PROJECT_DIR/What_the_Hack-$BUILD_VERSION.apk
  # retry because sometimes checkingout artifacts fails
  retry: 2
  artifacts:
    name: "$BUILD_NAME $CI_PIPELINE_IID $BUILD_TARGET"
    paths:
    - "$CI_PROJECT_DIR/*.apk"

    expire_in: 1 week
  variables:
    BUILD_TARGET: Android
    BUILD_NAME2: What_the_Hack


#build-unity-WebGL:
#  <<: *build-unity
#  variables:
#    BUILD_TARGET: WebGL

build-documentation:
  stage: documentation
  image: tsgkadot/docker-docfx:latest
  script:
  - docfx Documentation/docfx.json --logLevel Verbose
  - mv ./Documentation/html ./Wth.ModApi_Documentation
  artifacts:
    paths:
    - ./Wth.ModApi_Documentation
    expire_in: 2 weeks
  retry: 2

#pages:
#  image: alpine:latest
#  stage: deploy
#  script:
#  - mv ./Builds/WebGL public
#  artifacts:
#    paths:
#    - public
#    expire_in: 2 weeks
#  only:
#  - master