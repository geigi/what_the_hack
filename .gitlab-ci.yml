image: "gableroux/unity3d:2018.2.6f1"

stages:
- test
- build
- deploy

variables:
  BUILD_NAME: What_The_Hack
  GIT_SUBMODULE_STRATEGY: recursive
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "27.0.3"
  ANDROID_SDK_TOOLS: "26.1.1"

.android_before_script: &android_before_script
  before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
  - mkdir android-sdk-linux
  - unzip android-sdk.zip -d android-sdk-linux
  - echo y | android-sdk-linux/tools/android --silent update sdk --no-ui --all --filter android-${ANDROID_COMPILE_SDK}
  - echo y | android-sdk-linux/tools/android --silent update sdk --no-ui --all --filter "platforms;android-${ANDROID_COMPILE_SDK}"
  - echo y | android-sdk-linux/tools/android --silent update sdk --no-ui --all --filter platform-tools
  - echo y | android-sdk-linux/tools/android --silent update sdk --no-ui --all --filter build-tools-${ANDROID_BUILD_TOOLS}
  - echo y | android-sdk-linux/tools/android --silent update sdk --no-ui --all --filter extra-android-m2repository
  - echo y | android-sdk-linux/tools/android --silent update sdk --no-ui --all --filter extra-google-m2repository
  - ls -la
  - yes | ./android-sdk-linux/tools/bin/sdkmanager --licenses
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./${PROJECT_DIR}/gradlew

.unity_before_script: &unity_before_script
  before_script:
  - mkdir -p /root/.cache/unity3d
  - mkdir -p /root/.local/share/unity3d/Unity/
  - echo "$UNITY_LICENSE_CONTENT" | tr -d '\r' > /root/.local/share/unity3d/Unity/Unity_lic.ulf
#  - cp -rf ./AndroidPlugin/notificationprovider/build/outputs/aar/* ./Assets/Plugins/Android/
#  - cp -rf ./Wth.ModApi/Wth.ModApi/bin/Release/* ./Assets/ModTool/

#test-android:
#  image: openjdk:8-jdk
#  stage: test
#  <<: *android_before_script
#  script:
#    - ./AndroidPlugin/gradlew test
#  variables:
#    PROJECT_DIR: AndroidPlugin

test-api:
  image: "mono:latest"
  stage: test
  script:
    - msbuild /p:Configuration="Debug" /p:Platform="Any CPU" ./Wth.ModApi/Wth.ModApi.sln

.test: &test
  stage: test
  <<: *unity_before_script
  script: |
    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
      /opt/Unity/Editor/Unity \
        -projectPath $(pwd) \
        -runTests \
        -testPlatform $TEST_PLATFORM \
        -testResults $(pwd)/$TEST_PLATFORM-results.xml \
        -logFile \
        -batchmode
    UNITY_EXIT_CODE=$?
    if [ $UNITY_EXIT_CODE -eq 0 ]; then
      echo "Run succeeded, no failures occurred";
    elif [ $UNITY_EXIT_CODE -eq 2 ]; then
      echo "Run succeeded, some tests failed";
    elif [ $UNITY_EXIT_CODE -eq 3 ]; then
      echo "Run failure (other failure)";
    else
      echo "Unexpected exit code $UNITY_EXIT_CODE";
    fi
    cat $(pwd)/$TEST_PLATFORM-results.xml | grep test-run | grep Passed
    exit $UNITY_TEST_EXIT_CODE
  artifacts:
    paths:
    - $(pwd)/$TEST_PLATFORM-results.xml
    expire_in: 2 weeks

test-unity-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode

test-unity-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode

build-AndroidPlugin:
  image: openjdk:8-jdk
  stage: build
  <<: *android_before_script
  script:
    - ./AndroidPlugin/gradlew assembleDebug -p ./AndroidPlugin
  artifacts:
    paths:
    - AndroidPlugin/notificationprovider/build/outputs/
    expire_in: 2 weeks
  variables:
    PROJECT_DIR: AndroidPlugin

build-Wth.ModApi:
  image: "mono:latest"
  stage: build
  script: |
    echo "Building Wth.Api Solution"
    export BUILD_PATH=./Wth.ModApi/Wth.ModApi/bin/Release/
    msbuild /p:Configuration="Release" ./Wth.ModApi/Wth.ModApi.sln
    ls -la $BUILD_PATH
    [ -n "$(ls -A $BUILD_PATH)" ] # fail job if build folder is empty

  artifacts:
    paths:
    - ./Wth.ModApi/Wth.ModApi/bin/Release/
    - ./Wth.ModApi/Wth.ModApi.Editor/bin/Release/
    expire_in: 2 weeks

.build-unity: &build-unity
  stage: build
  #tip: you can reuse same stage to do everything in parallel and reduce overall time
  # stage: test
  <<: *unity_before_script
  script: |
    echo "Building for $BUILD_TARGET"
    export BUILD_PATH=./Builds/$BUILD_TARGET/
    mkdir -p $BUILD_PATH
    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
      /opt/Unity/Editor/Unity \
        -projectPath $(pwd) \
        -quit \
        -batchmode \
        -buildTarget $BUILD_TARGET \
        -customBuildTarget $BUILD_TARGET \
        -customBuildName $BUILD_NAME \
        -customBuildPath $BUILD_PATH \
        -customBuildOptions AcceptExternalModificationsToPlayer \
        -executeMethod BuildCommand.PerformBuild \
        -logFile
    ls -la $BUILD_PATH
    [ -n "$(ls -A $BUILD_PATH)" ] # fail job if build folder is empty
  
  artifacts:
    paths:
    - ./Builds/
    expire_in: 2 weeks
#tip: uncomment following lines if you'd like to build only on master branch
#   only:
#     - master

build-unity-Linux-x86_64:
  <<: *build-unity
  variables:
    BUILD_TARGET: StandaloneLinux64

build-unity-macOS:
  <<: *build-unity
  variables:
    BUILD_TARGET: StandaloneOSX

#Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-StandaloneOSXUniversal:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneOSXUniversal

build-unity-Windows-x86_64:
  <<: *build-unity
  variables:
    BUILD_TARGET: StandaloneWindows64

build-unity-WebGL:
  <<: *build-unity
  variables:
    BUILD_TARGET: WebGL

pages:
  image: alpine:latest
  stage: deploy
  script:
  - mv ./Builds/WebGL public
  artifacts:
    paths:
    - public
    expire_in: 2 weeks
  only:
  - master